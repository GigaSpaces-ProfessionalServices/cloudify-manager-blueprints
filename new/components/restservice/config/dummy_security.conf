enabled: true
#########################################################################
# A list of one or more authentication providers. Cloudify will use
# these providers in the order specified in the list (Mandatory).
# The list below utilizes Flask-secuREST's password-based and token-based
# authentication providers.
# ** Note: Passwords are usually not store as plaintext. Set passowrd_hash
#          to match the hash scheme used in the selected datastore.
#          Acceptable values: 'bcrypt', 'des_crypt', 'pbkdf2_sha256',
#          pbkdf2_sha512', 'sha256_crypt' and 'sha512_crypt'.
#########################################################################
authentication_providers:
  - name: password
    implementation: flask_securest.authentication_providers.password:PasswordAuthenticator
    properties:
      password_hash: plaintext
  - name: token
    implementation: flask_securest.authentication_providers.token:TokenAuthenticator
    properties:
      secret_key: my_secret

#########################################################################
# Authorization provider that authorizes all requests
#########################################################################
authorization_provider:
  implementation: flask_securest.authorization_providers.authorize_none:AuthorizeNone
  properties: {}

#########################################################################
# A user-store implementation is used to find a matching user
# and load its details (Mandatory unless you specified a custom
# authentication provider that does not require it).
# The configuration below will use Flask-secuREST's "simple userstore"
# implementation, with the users listed inline.
#########################################################################
userstore_driver:
  implementation: flask_securest.userstores.simple:SimpleUserstore
  properties:
    userstore:
      user1:
        username: example_user1
        password: example_password1
        email: example_user1@your_domain.dom
      user2:
        username: example_user2
        password: example_password2
        email: example_user2@your_domain.dom
      user3:
        username: example_user3
        password: example_password3
        email: example_user3@your_domain.dom
    identifying_attribute: username
#########################################################################
# REST calls to "MANAGER_IP/tokens" will generate and return
# authentication tokens if an auth_token_generator is set (Optional).
# The below configuration sets Flask_secuREST's token module as the
# token generator.
# ** Note: Set the same secret key as used by your token authenticator
#########################################################################
auth_token_generator:
  implementation: flask_securest.authentication_providers.token:TokenAuthenticator
  properties:
    secret_key: my_secret
    expires_in_seconds: 600
#########################################################################
# Enabling SSL limits communication with the server to SSL only.
# If enabled, the certificate and private key files must be found in
# resources/ssl.
#########################################################################
ssl:
  enabled: true
#########################################################################
# Security log file properties (Optional, the default values are as
# shown below).
# ** Note: The log file is located on the rest-service container
#########################################################################
audit_log_file: /var/log/cloudify/rest/rest-security-audit.log
audit_log_level: INFO # values: CRITICAL, ERROR, WARNING, INFO, DEBUG
audit_log_file_size_MB: 100
audit_log_files_backup_count: 20